

import discord
from discord.ext import commands
from discord import app_commands
import requests

import json
import html
import re
import zlib
import base64
import os
import gzip
from typing import Optional
import io
from io import BytesIO
import nbtlib
from typing import Dict, Any
from gzip import GzipFile
from base64 import b64decode
from dotenv import load_dotenv
from keep_alive import keep_alive
keep_alive()
load_dotenv()

token = os.getenv("TOKEN")

parameters = {
    "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏": "uniqueId",
    "–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –∞–π–¥–∏": "numberId",
    "–í–ª–∞–¥–µ–ª–µ—Ü": "owner",
    "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è": "displayName",
    "–†–∞–∑–º–µ—Ä": "size",
    "–ì–æ–ª–æ—Å–æ–≤": "votes",
    "–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": "generatorName",
    "–°–ø–∞–≤–Ω": "spawnPosition",
    "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏": "builders",
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏": "developers",
    "–ò–≥—Ä–æ–∫–∏ —Å –ø–æ–ª—ë—Ç–æ–º": "flyers",
    "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫": "whitelist",
    "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫": "blacklist",
    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": "locked",
    "–í—Ä–µ–º—è": "time",
    "allowBuild": "allowBuild",
    "allowFlight": "allowFlight",
    "allowPhysics": "allowPhysics",
    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": "createdTime",
    "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å": "published",
    "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ—Å—Ç—å": "recommended",
    "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç": "displayItem",
    "–†–µ—Å—É—Ä—Å–ø–∞–∫": "resourcepacks",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "categories"
}

gen_type = {
    "flat": "üåÑ –ü–ª–æ—Å–∫–∏–π",
    "void": "üï≥Ô∏è –ü—É—Å—Ç–æ–π",
    "coding": "üíª –ö–æ–¥–∏–Ω–≥",
    "debug": "üîß –û—Ç–∫–ª–∞–¥–∫–∞",
    "sponge": "üßΩ –ì—É–±–∫–∞ –ú–µ–Ω–≥–µ—Ä–∞"
}

categories = {
    "arcade": "–ê—Ä–∫–∞–¥–∞",
    "versus": "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è",
    "combat": "–°—Ä–∞–∂–µ–Ω–∏–µ",
    "parkour": "–ü–∞—Ä–∫—É—Ä",
    "adventure": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
    "roleplay": "–†–æ–ª–µ–≤–∞—è",
    "strategy": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "puzzle": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏",
    "resources": "–†–µ—Å—É—Ä—Å—ã",
    "elimination": "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ",
    "creation": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
    "miscellaneous": "–î—Ä—É–≥–æ–µ"
}


def decode_base64_to_json(base64_str: str) -> dict:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Base64-—Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ—ë –≤ JSON-–æ–±—ä–µ–∫—Ç (dict).
    """
    decoded_bytes = base64.b64decode(base64_str)
    decoded_str = decoded_bytes.decode("utf-8")
    return json.loads(decoded_str)

def get_skin_value_nbt(snbt_str: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Value —Ç–µ–∫—Å—Ç—É—Ä—ã —Å–∫–∏–Ω–∞ –∏–∑ SNBT-—Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é nbtlib.
    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: '{Count:1b,id:"minecraft:player_head",tag:{SkullOwner:{...}}}'
    """
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ NBT-–æ–±—ä–µ–∫—Ç
    nbt = nbtlib.parse_nbt(snbt_str)

    # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º –∫ Value
    value = nbt["tag"]["SkullOwner"]["Properties"]["textures"][0]["Value"]

    return value



def extract_id_from_encoded_data(encoded_data):
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ base64
        decoded_data = base64.b64decode(encoded_data)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (gzip)
        decompressed_data = zlib.decompress(decoded_data, zlib.MAX_WBITS | 16)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        text = decompressed_data.decode('utf-8', errors='ignore')

        # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ id
        match = re.search(r'minecraft:[a-z0-9_]+', text)
        if match:
            return match.group(0)
        else:
            return "minecraft:grass_block"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return "minecraft:grass_block"
def get_item_id(minecraft_str):
    # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ id:
    match = re.search(r'id:"([^"]+)"', minecraft_str)
    if match:
        if "player_head" in match.group(1):
            value = get_skin_value_nbt(minecraft_str)
            base64 = decode_base64_to_json(value)
            skin_hash = str(base64['textures']['SKIN']['url']).split('/')[-1]
            return f"https://mc-heads.net/head/{skin_hash}"
        else:
            print(1)
            return match.group(1)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    else:
        item = extract_id_from_encoded_data(minecraft_str)
        if "player_head" not in item:
            if item:
                return item.replace("ID: ","")
            else:
                return "minecraft:grass_block"
        else:
            with GzipFile(fileobj=BytesIO(b64decode(minecraft_str.encode()))) as f:
                root = nbtlib.File.from_fileobj(f)  # —Å—Ä–∞–∑—É –∫–æ—Ä–µ–Ω—å
                value = (
                    root.get("components", {})
                    .get("minecraft:profile", {})
                    .get("properties", [{}])[0]
                    .get("value")
                )

            if not value:
                return "minecraft:player_head"

            base64 = decode_base64_to_json(value)
            skin_hash = str(base64['textures']['SKIN']['url']).split('/')[-1]

            return f"https://mc-heads.net/head/{skin_hash}"


def strip_minecraft_colors(text):
    first_color = None

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç: HTML-—Å—Ç–∏–ª—å –∏–ª–∏ Minecraft-style (&a, ¬ßc –∏ —Ç.–¥.)
    color_match = re.search(r'&?#([0-9a-fA-F]{6})|[¬ß&]([0-9a-fA-F])', text, flags=re.IGNORECASE)
    if color_match:
        if color_match.group(1):  # HTML-—Ü–≤–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä #ff00ff
            first_color = color_match.group(1).lower()
        elif color_match.group(2):  # Minecraft –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬ßa
            mc_colors = {
                '0': '000000', '1': '0000aa', '2': '00aa00', '3': '00aaaa',
                '4': 'aa0000', '5': 'aa00aa', '6': 'ffaa00', '7': 'aaaaaa',
                '8': '555555', '9': '5555ff', 'a': '55ff55', 'b': '55ffff',
                'c': 'ff5555', 'd': 'ff55ff', 'e': 'ffff55', 'f': 'ffffff'
            }
            first_color = mc_colors[color_match.group(2).lower()]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ –∫–æ–¥—ã
    text = re.sub(r'&?#(?:[0-9a-fA-F]{6})', '', text)
    text = re.sub(r'¬ß[0-9a-fklmnor]', '', text, flags=re.IGNORECASE)
    text = re.sub(r'&[0-9a-fklmnor]', '', text, flags=re.IGNORECASE)

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    text = html.unescape(text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '\\n'
    parts = text.split('\\n', 1)
    title = parts[0].strip()
    description = parts[1].strip() if len(parts) > 1 else None
    if description is None:
        description = ""
        
    description = description.replace("\\n","\n")

    return title, description, f"#{first_color}" if first_color else "#ffffff"


def colourr(hex_color):
    return int(hex_color.lstrip('#'), 16)

intents = discord.Intents.default()
intents.message_content = True

client = commands.Bot(command_prefix="!", intents=discord.Intents.all())

@client.event
async def on_ready():
    await client.tree.sync()
    print(f'–ë–æ—Ç {client.user} –≥–æ—Ç–æ–≤!')

@client.tree.command(name="world",description="–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Ä–µ –ø–æ –∞–π–¥–∏ –º–∏—Ä–∞")
@app_commands.allowed_contexts(guilds=True,dms=True,private_channels=True)
@app_commands.choices(
    parameter=[
        app_commands.Choice(name="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏", value="uniqueId"),
        app_commands.Choice(name="–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –∞–π–¥–∏", value="numberId"),
        app_commands.Choice(name="–í–ª–∞–¥–µ–ª–µ—Ü", value="owner"),
        app_commands.Choice(name="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è", value="displayName"),
        app_commands.Choice(name="–†–∞–∑–º–µ—Ä", value="size"),
        app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤", value="votes"),
        app_commands.Choice(name="–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", value="generatorName"),
        app_commands.Choice(name="–°–ø–∞–≤–Ω", value="spawnPosition"),
        app_commands.Choice(name="–°—Ç—Ä–æ–∏—Ç–µ–ª–∏", value="builders"),
        app_commands.Choice(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", value="developers"),
        app_commands.Choice(name="–ò–≥—Ä–æ–∫–∏ —Å –ø–æ–ª—ë—Ç–æ–º", value="flyers"),
        app_commands.Choice(name="–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", value="whitelist"),
        app_commands.Choice(name="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", value="blacklist"),
        app_commands.Choice(name="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", value="locked"),
        app_commands.Choice(name="–í—Ä–µ–º—è", value="time"),
        app_commands.Choice(name="allowBuild", value="allowBuild"),
        app_commands.Choice(name="allowFlight", value="allowFlight"),
        app_commands.Choice(name="allowPhysics", value="allowPhysics"),
        app_commands.Choice(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", value="createdTime"),
        app_commands.Choice(name="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", value="published"),
        app_commands.Choice(name="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", value="recommended"),
        app_commands.Choice(name="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç", value="displayItem"),
        app_commands.Choice(name="–†–µ—Å—É—Ä—Å–ø–∞–∫", value="resourcepacks"),
        app_commands.Choice(name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", value="categories")
    ]
)
@app_commands.user_install()
async def world(interaction: discord.Interaction, id: str, parameter: Optional[str] = None):
    response = requests.get(f"http://api.creative.justmc.io/public/creative/worlds/get/{id}")
    if response.status_code == 200:
        data = response.json()
        if parameter:
            if parameter in data:
                await interaction.response.send_message(f"**{next((k for k, v in parameters.items() if v == parameter), None)}:**\n\n``{data[parameter]}``", ephemeral=True)


        if parameter is None:


            owner_data = data["owner"]
            owner_name = owner_data["name"]

            genType = data["generatorName"]

            if genType not in gen_type:
                genName = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            else:
                genName = gen_type[genType]

            categories_list = data["categories"]
            categoriess = ', '.join([
                translated_category.capitalize() if i == 0 else translated_category.lower()
                for i, category in enumerate(categories_list)
                for translated_category in [categories.get(category, category)]
            ])

            size = data["size"]
            votes = data["votes"]

            builders_list = data["builders"]
            builders_text = ""
            for player in builders_list:
                player = player["name"]
                builders_text = builders_text + f"{player}, "
            builders_text = builders_text[:-2] + ""
            if len(builders_list)<1:
                builders_text = "–ù–µ—Ç"

            developers_list = data["developers"]
            developers_text = ""
            for player in developers_list:
                player = player["name"]
                developers_text = developers_text + f"{player}, "
            developers_text = developers_text[:-2] + ""
            if len(developers_list)<1:
                developers_text = "–ù–µ—Ç"

            flyers_list = data["flyers"]
            flyers_text = ""
            for player in flyers_list:
                player = player["name"]
                flyers_text = flyers_text + f"{player}, "
            flyers_text = flyers_text[:-2] + ""
            if len(flyers_list)<1:
                flyers_text = "–ù–µ—Ç"

            whitelist_data = data["whitelist"]
            whitelist_text = ""
            for player in whitelist_data:
                player = player["name"]
                whitelist_text = whitelist_text + f"{player}, "
            whitelist_text = whitelist_text[:-2] + ""
            if len(whitelist_data)<1:
                whitelist_text = "–ù–µ—Ç"

            blacklist_data = data["blacklist"]
            blacklist_text = ""
            for player in blacklist_data:
                player = player["name"]
                blacklist_text = blacklist_text + f"{player}, "
            blacklist_text = blacklist_text[:-2] + ""
            if len(blacklist_data)<1:
                blacklist_text = "–ù–µ—Ç"

            createdTime = data["createdTime"]
            createdTime = createdTime.split("T")[0:]
            createdTime = createdTime[0]
            createdTime = createdTime.split("-")[0:]

            locked = data["locked"]
            if locked == True:
                locked = "–ó–∞–∫—Ä—ã—Ç"
            else:
                locked = "–û—Ç–∫—Ä—ã—Ç"

            year = createdTime[0]
            month = createdTime[1]
            day = createdTime[2]

            createdTime = f"{day}/{month}/{year}"

            published = data["published"]
            if published == True:
                published = "–î–∞"
            else:
                published = "–ù–µ—Ç"

            recommended = data["recommended"]
            if recommended == True:
                recommended = "–î–∞"
            else:
                recommended = "–ù–µ—Ç"

            displayName = data["displayName"]
            defaultName, description, color = strip_minecraft_colors(displayName)

            item_raw = data["displayItem"]

            if item_raw != None:
                itemData = get_item_id(data["displayItem"])
                if "https://mc-heads.net/head/" not in itemData:
                    itemData = itemData.replace("minecraft:", "")
                    url_item = f"https://mc.nerothe.com/img/1.21.4/minecraft_{itemData}.png"
                else:
                    url_item = itemData
            else:
                itemData = "grass_block"

            embed = discord.Embed(title=f"{defaultName}", description=description, color=colourr(f"{color}"))
            embed.add_field(name="–°–æ–∑–¥–∞—Ç–µ–ª—å", value=f"üë§ {owner_name}")
            embed.add_field(name="–ê–π–¥–∏", value=f"üÜî {id}")
            embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", value=f"üï¶ {createdTime}", inline=True)

            embed.add_field(name="",value="",inline=False)

            embed.add_field(name="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", value=f"üö™ {locked}", inline=True)
            embed.add_field(name="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", value=f"üì¢ {published}", inline=True)
            embed.add_field(name="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω", value=f"üåü {recommended}", inline=True)

            embed.add_field(name="", value="", inline=False)

            embed.add_field(name="–†–∞–∑–º–µ—Ä", value=f"üó∫Ô∏è {size * 32}x{size * 32}", inline=True)
            embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤", value=f"‚≠ê {votes}", inline=True)
            embed.add_field(name="–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", value=genName)


            embed.add_field(name="", value="", inline=False)

            embed.add_field(name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", value=f"üóÇÔ∏è {categoriess}")
            embed.add_field(name="–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", value=f"üìÑ {whitelist_text}",inline=True)
            embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", value=f"üë®‚Äçüíª {developers_text}", inline=True)

            embed.add_field(name="", value="", inline=False)

            embed.add_field(name="–°—Ç—Ä–æ–∏—Ç–µ–ª–∏", value=f"‚öíÔ∏è {builders_text}", inline=True)
            embed.add_field(name="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", value=f"üö´ {blacklist_text}")

            embed.set_thumbnail(url=url_item)

            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message("**–ú–∏—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**")

@client.tree.command(name="about",description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
@app_commands.allowed_contexts(guilds=True,dms=True,private_channels=True)
@app_commands.user_install()
async def about(interaction: discord.Interaction):
    await interaction.response.send_message("–ë–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å **API** JustMc, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Ä–∞—Ö.\n\n–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞:\n- DS **dominosmersi**\n- TG **@DominosMersi**")


client.run(token)
